# helm repo add harbor https://helm.goharbor.io
# helm --namespace infra template harbor/harbor --set persistence.persistentVolumeClaim.registry.storageClass=rook --set persistence.persistentVolumeClaim.chartmuseum.storageClass=rook --set persistence.persistentVolumeClaim.jobservice.storageClass=rook --set persistence.persistentVolumeClaim.database.storageClass=rook --set persistence.persistentVolumeClaim.redis.storageClass=rook --set harborAdminPassword=admin --set expose.type=loadBalancer --set expose.tls.commonName=registry.testbed.amsy.dev | sed -e 's|RELEASE-NAME-||g' | grep -v RELEASE-NAME > harbor.yaml
---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "NllldU1sQlBKNEFvMEFnMQ=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "YWRtaW4="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "ZGdCN3RjdGVBUVFrWldOYQ=="
---
# Source: harbor/templates/nginx/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-nginx
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRWEdqbkhHT2lHK1pOWDgrS0t3N3hLekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakF3TWpFd01Ea3dPREkzV2hjTk1qRXdNakE1TURrdwpPREkzV2pBa01TSXdJQVlEVlFRREV4bHlaV2RwYzNSeWVTNTBaWE4wWW1Wa0xtRnRjM2t1WkdWMk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXlvNVoxTnAxVVJUOVRRVmQwUTM5dVduNTA5UTcKMnFqbysrakg0eUtJTFRPbnRlUEJocDcrWmxZUHhXU1Z3UHNCVWpZaUlyd2l2VS9mUE5paEt2QlhxL1kzSUJ2Swp2NXBuU2xtK1R4YlZNVDdkWHY4WjdZS1Nrb3BOaldENktpZ3ZHVmE1YWFMYURnUXZJb012ZXM3YllDR3pSUWhiClkvV0FwdXk2RXg0ZWhldU5kSituMVplQ1g0L0d1dS9yRHVaQWZMNVg5MEsxUzFmUnNoclNBb0F6YWowaVpFdjAKbUc0RFhQbndGT3YyeVB6VUltQjZJcWd5L2NOLy8zT0w2a1owbG9FR2t5WkVJVWlFWm45NER4MnpsNHlVL2EyMAp6TTJQNVd4Y2hMMmpvWTNvOVc0a3JUT0JNWVlySWlnR0hsNVl5MTkwSVg5MVB6ekNrYUhYMzBjaXl3SURBUUFCCm8yVXdZekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SkFZRFZSMFJCQjB3RzRJWmNtVm5hWE4wY25rdWRHVnpkR0psWkM1aApiWE41TG1SbGRqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFuSUVRUUhnYmtoWUlVQm1YbWtyWnlhV2R2bnltCjNleXFhTW9qYTNZU2JEU1NoNExmQzJwNEo1REVFR3owRmJndWEzUDZjQTI2TG1hRmpqV2xhay9KQURiNE9QVmIKZkNMY3RlaGJVMGY3NjY0cWw0dTNaeHNsZkt1VVQ4NTNJb1ZhOTRDQVlTS2RpenNRNjRRK0d6NW9tTWN2U1Q2agphQ0tQWGdKYVg4QlpQZm5hWTEyVk95WUhGd1F6MmpKTzNFejJKZVpqMVQ3TEVtQzRUalZxS05sR1hBMGVwY0FqCjRJYXhXMVhYN3RwWHFrWkh6U3NGc0dtVWtkVm9qM2wvL1h0Y014cVBYSm5YNjhpSHZGR1Z6a2JlR1JJbVdVa2YKNWpmbGxKc3NGRWVrS2gwTHppV1BPT3N6ODFiS2YvQVZjTHN1MGNlbVlaUjlZMjJwWXlrcnZvWlBhZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeW81WjFOcDFVUlQ5VFFWZDBRMzl1V241MDlRNzJxam8rK2pINHlLSUxUT250ZVBCCmhwNytabFlQeFdTVndQc0JVallpSXJ3aXZVL2ZQTmloS3ZCWHEvWTNJQnZLdjVwblNsbStUeGJWTVQ3ZFh2OFoKN1lLU2tvcE5qV0Q2S2lndkdWYTVhYUxhRGdRdklvTXZlczdiWUNHelJRaGJZL1dBcHV5NkV4NGVoZXVOZEorbgoxWmVDWDQvR3V1L3JEdVpBZkw1WDkwSzFTMWZSc2hyU0FvQXphajBpWkV2MG1HNERYUG53Rk92MnlQelVJbUI2CklxZ3kvY04vLzNPTDZrWjBsb0VHa3laRUlVaUVabjk0RHgyemw0eVUvYTIwek0yUDVXeGNoTDJqb1kzbzlXNGsKclRPQk1ZWXJJaWdHSGw1WXkxOTBJWDkxUHp6Q2thSFgzMGNpeXdJREFRQUJBb0lCQUJPNWxRbmpWRFZYSSt1UwpNRGFoZENuUUppSDRzdk55SzI0TWx4cUpURldLaURSd1AzSktuVjk5MWY5VThqaGV1UncyWlZDWW5aRnQ2OEZUCkh5NjlST3hjQjdZNnZwMjEvWVVDQkVSVFp1TnF5Y2ZzYzZ2cllUYWYvVGxkVGo4NHRvMXpJbzhrNnJNZXVUQlYKTWhSMWZHdDZIS2tHVFZBSW9rU2ZIT2Vyc1RFOU9LWEo1cE5xbVF6RmpMa2VrNnVtQ2dHTXpSZ1lJeHBnbjBHTQo1OG9raVorbFZUSTEzNkY1K0VBaFRpMmpjWDI0Y0VaV1k1OVhQTTJscWVWSnR0UjFVNGFBamJ4alRjYWcwWGhiClRvY2JHWFUwbWllOVlRckZvV3U5MVNOTU5xelNCdHh2azBMZGp0YjJKbit1QUlpTXdSbDNLenFiTTlObFZ5YjgKL0ROekx0RUNnWUVBM2YycE8vREJNUC9iQ0FTSTROYm9DS0RlY25aS1drcC9hS2hraFJtRUJsVDNyelhtVGlvbwpYdHgzUzFYT0pPbmpPc0dWSVNkU3YxNERrOGFKdVZQdkwvSm9lTGg5WFFHc3RHTHpjRTdWWlZtNTV6eExyTFkyCnkyUWtPcjdWTXZiM2xhZVdud1ZVK2I4RWcweG0yNmMwNFNrOVkzdm5FR3JZZEhBWWFnTkpuVlVDZ1lFQTZaWjQKSWJacmNFazRBNjRCdzNOZkpRVzRVY1hCSExwQ0FIODhkdE40c2hiL2RaczRhTU5vVDU2SVU4TFNjVkE0a1FEbAo1MlNpdEFKOUhQWVozMzhtUUR4SDRMQi81cVVVakZZbDhxS2RLV2ZiMmFBSEdzWldHUmFJQ1ZiU1RJWDU1ZkFlCjcyQWRXNHNFQ3ozSmdEUmMwMmNUaEM1SVQ3VFEvU3VQUE9kOHY1OENnWUVBaVhtdnRva3dlekhYNlMwMXYxZ1gKdGxBNXNsVURVc3RULy9KWTNmeWhRSEthT1ExK0pPWUN2a3gyTEZkbEpJTWJ6NlZXdjROa3dWSnRrTFNoVWY1aQo0Q1NWQWozdWxReVdjZGZkdnExemhpSjgrSERreEg3TGpFWG1FZU5na1FGVTduOHN6aW8xSjcxZUJCbnFrUmtKCnJHOG5yMVpxRUVhNjZkRUpyWTEvcDBrQ2dZRUFrcGJEUFNUbHQ4bTdSVlBsOTJwbnd5d2J4L1Y2Z3pUQVJ0K1MKYWwrNzFzZG4rYjQzWUVlQkpyWXVoNkl6dnJqQlJ2NXhTUTEycmRFQ0F6TE9lZHVwZlpaVzVVTGVnVGdIOVNuNwpGcEhHWHoyMlVwU0M0T0tuRllkMlI2WWN3N2t3WW9TV1pWTEVHYmJjQ3RIenFta3g5OWt2L2p1dFZaZjdyMld1CnRtSHZmN0VDZ1lFQWsxbE1LZ0paUElnQW11MmJjWlp2OEhteGs4Z2tUVmQ2T1p4SStRS3Z6SDNiRnNmU2pZQVkKbWExeVVlWm03eTJYSXEvWm5JMW0zVUdJTDRuSTg1VkdZTS9XTmZmaEwyb1QxREdqQ1B5dG5COUtFalJZSThsRwoyaW1YczVhekdPajZvbmhsWnMvdDVweG5jRTZrclJaRndsdlNUcGdsV1FGZXpkOHYxcDBuT3F3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5VENDQWQyZ0F3SUJBZ0lSQUx5eGkrQm5yekpVaHR1bGl3em1iWFl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURJeE1EQTVNRGd5TjFvWERUSXhNREl3T1RBNQpNRGd5TjFvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6YWtaV3ZFU2JHeXA4TkRFRGQ4UjVscm54ajZ6MzY2dk1YVkp1RlZFWmRQOWhxNmQKZWgrNDVjOXUzbFlWV21OOWFKcTNCRXVPNGRiTXdpOVJ4Mzg5OXJsbkl1dC9yY3R4d2tCeVVDU1N3amVRYXRHQQoyVGsxbmFaTVZ4d05veERGalpEbVYyS2NCTUVSd3pWa0tnenM3cWVhWUl5ZVg0cWRIVDlIREs4dFQ5b0ZSZERwCm5sU1ZkK1dlRmUvSmN5cHZlSlg1NTNSaDJlNFlmWGFmajlxdXNvdENocC9HdVgrWWN6TnRCMWFzSm9UZkVXZ0sKcXkzMENXb0JBZnRnN3p2SGhGeG5vQ3dMbXVEOTlIV0RvNFFseUpIMk9Cb0NlbGhkM3EyYU1IM0IvbDhZUzhmZgowZW1zNXFjTWdwYy9zUHEzaVg4K2JJQ2ZqSTZIOTgyOEhWYzZsd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRXdOT2FNRk1EZWNFU0ptVy9kQWZpejcxMWVQY3JzdgpScmZmSEp3clNDeTVGUFJUTDBxQUtDbnpDYWV3eUR0cGd6VVBWT2pIUi9iNXRwd2lIcnZjRGR0WEhMTHRrWXBzCkViaFYxakdnRUJHUnRnNkVOenFNZ3A1SmNpV1NNd2diU0Jzelp3dG5YUDd2cnRQb2NFNjRQTUI2dWIrS1BiT3oKRlJjdXJZc04rS1c5QnFSSksxZUZJNTNIMkl3dFpGazZoSDJJY0VmRFhNRzRFQkxicWkyYnNkN1BvWHErU2JFbgpUbXRGb0FtOElINWFRbmthR0xkQndZTFpKb0tZUWNlT2dtaDFaVWVVVWlzcmNsdEpDeXNyY3BZdnd0ZndHMi9GClY2RHBORXVUN21xeGcwdGxqbURJYmRGcktHSFpZZTJHdVpOdE5jeHNvcUFENmhYTk9iUVJjYk09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBakNDQWVxZ0F3SUJBZ0lRSW9wTktaeXJsWGVrMENhVmx5aTJ6ekFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNREl4TURBNU1EZ3lObG9YRFRJeApNREl3T1RBNU1EZ3lObG93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU42d1dtc054ODl0aUYyT083Q1lVT0JZRHBvSHdhaDUKbVVKa1RzNkUyTHFxLzBLNmM5cW5QcVl1aTBkQ1VDN1hmNmxZWmMvV0s2TjZPbERnTzByeXR3VVJOSm5GSnVaegpPRGxudDNETHlWWmN0VjFER0UwVlcrTFdXb2FWOWQ0TTR2Z2pBbmtuR3BnajhsQUlYYVRBdklIcjBBWEVDVTJ2ClVvSjhZeDJnemRDbmgvNUkyTGZrd0xhVXI5Q3JXRGE2UmtMR0Z4N2dhY1hTV1QrQmVQOWVORElqSTJjZkVxZjIKKzJjeXdxZnpiVUJUdGlLaXllQ2h1NFBsbVlDd01UK3R3RlpndUxCRHlENnVRWld3enFHWkt0QXBzM2V2SlVyUApUdlFqUW10VkxBdUlOY1hLbWdVSUt5dlZpTkpqMUs1L2VjalFJUkpwaGEzN0FoZDJ6djdEWHpVQ0F3RUFBYU5DCk1FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBa29nckVwTWl5YVdZMgp0dFVhbk1YUGl5dzBQL1ByTDVSK09tYTZtZW90eHVqR3hNNncyQlB5dVRkQ01kY2VGcks3cEthL1hPM0J3Nkd5CkNwaEtraVRlTE1xeWtGeGcwK2ZsOUpMNlgzWlR5ZENsZHU1UFlBeXM4R1Raajl3bGtseGJtdE5PT1E2UHJGTGcKOWRwSUV3L3l1dlhoOVhVYmdwS0VWeEllVHI2UjVhN2d5b2JRc2pBby9RT1pXdmN1WE5mbVh6K0VENzVkRDI2Zwp5MENiSCt4NGJ4N2pCclJwcmVlY3FkMVVJUFN4RXZFZUo1SFc3bkwrbUYrRzNkYU41alJPVHA3OFRZbXBBQlRHCmxWemtPSFMyVXdBRkY3aVNVeG1ZYlJlcUt2Y0VBK1Rnc0dCd0o0RDAzTGdoVUxZaEczNXFhelBuVzc1SDNlQ3IKOTVIM3k2cisKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lSQUxGeGZFS1NoRXplY05JL050UlYzNEV3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREF5TVRBd09UQTRNamRhRncweQpNVEF5TURrd09UQTRNamRhTUN3eEtqQW9CZ05WQkFNVElWSkZURVZCVTBVdFRrRk5SUzFvWVhKaWIzSXRibTkwCllYSjVMWE5wWjI1bGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUw3T3dQbE4Kcmtmb0FSMHBwenRFMUxpWHlDVXdxZTFrR2R0ZVhhQlFXdnJKblhZNkZXTE5NM0I0aEF4SUhqVVpvL3JWdUF2dApTS2F1WXdVNmVmdzd0ZktkZ2hMWDJtMWtlcXRJeEVjd1kzUWloWXU3RjdKaU91M2prSmwyallOMmRLUjBmclpxCi9zL0tqYzFMcm1MUUt3Ynk2c2NleUVoZ0Nrakg3YXVUSXRXeUZNYXBqcHNJcitGVGxObS83bDhPeUQvZHpCUW4KZHdHbk1qZWFJNjN1eTgxTHZ5T3ZIMmFoTnRLUmc3TFhkamtkL2JERTRSSEdtdHlETlorbUt5aUtwUlFwSDBRcgozUmtiTUxRZGpldUlPM3N5UUhVL05QdWVDYS9Sc3Zkazc4WnYxMDdSK0wreTVDay9FczYwYzJKMk82TWliQkpXCmQyVzF3d0NKVHdKbGFITUNBd0VBQWFNL01EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBampmaVp0cUY4YXgreW1iODZuWEhnc1RyTW10dC9FOWM4ZWlqcjZDRHVWSTExVFdJSHhlOXExMFgxClB4MWRsUzRzQ1J1KzhnUTR2U3Ntbzd3TEdKWXN4NGdaajd2WmRLb0tzRDZVRGRrYUhoK21qbEdScEtwSDBPbDcKaVUwbjB6aWdPdlp4VExCVG5nRFdnSFQrN21pVkRhdUplbVl3SmFZTHMyMmJaM1ZZZS9FZFhmc1BVdURQR2NpOQo5eVZFcTE2RkpuYVNHdThpQTNSTThNWnZVYTJGblV1WmlGMk14NWpHWDEra25zazJ3MENCMGVDbXA3THlOTlVYCkNDaE95WVUvWHRjbDAxL29DaW5PcWsxMW4wbXh0N3hSMHo1SHErVzRibDBVb1lHRk14VVE5cHNrd2x3ZHFJTTEKbVFrK1I3OWg4UFVUMDE5c2R5WGhIQm94Z1RUdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdnM3QStVMnVSK2dCSFNtbk8wVFV1SmZJSlRDcDdXUVoyMTVkb0ZCYStzbWRkam9WCllzMHpjSGlFREVnZU5SbWordFc0QysxSXBxNWpCVHA1L0R1MThwMkNFdGZhYldSNnEwakVSekJqZENLRmk3c1gKc21JNjdlT1FtWGFOZzNaMHBIUit0bXIrejhxTnpVdXVZdEFyQnZMcXh4N0lTR0FLU01mdHE1TWkxYklVeHFtTwptd2l2NFZPVTJiL3VYdzdJUDkzTUZDZDNBYWN5TjVvanJlN0x6VXUvSTY4ZlpxRTIwcEdEc3RkMk9SMzlzTVRoCkVjYWEzSU0xbjZZcktJcWxGQ2tmUkN2ZEdSc3d0QjJONjRnN2V6SkFkVDgwKzU0SnI5R3k5MlR2eG0vWFR0SDQKdjdMa0tUOFN6clJ6WW5ZN295SnNFbFozWmJYREFJbFBBbVZvY3dJREFRQUJBb0lCQUZlb2JJY2I1T0VyK0xjSgpGOGJtekVNeGw4VmVJZkxwZGVlTjVyMXJyU0JoMTNFbEpnWUo5NFBJR2dINmI4WTlUVlJETXhabm9HVFM0TExhCk5vaG1kaVJMc0NJd0FDMFphREdnY0d1MEV6eWJUM2J1TU9qR3NBUHg4OUJNNHA1dW9RK2NaVW93eFhkNHVzU0IKN0UrQkN3TmFQZm5VYm5heGlJZi9NWFVOVjRlTVNLdUpaR0xYWWRkV05GMmpwclBtUXloQVhVNjdWZzJteWNXeApyenMvVm0zNUZiZHp4U080SkJxM0NEWCtGcXFpOXpTL0daZUEyQy8xcFFIaVhMRVZzbXhVQWY5Snd4SjIrNURyCm13eld3SEVjK3pSckZpQnhmdktUR21kNy9EMUlZTGNucDFpS09pTG9ncFZ6QWZETFZ1aFV3eVhmNm5wUXk0ZUcKaDIvUlpBRUNnWUVBOEhsZzhVWVV0bnV3MFN6UGRzc1cwRjh6M3BuQmhjMlhNTXZaR0JBVDR2aG5SUk9NRFlacQpPdmkyelFsUE9IbXlsZ3JVYW16M2xDUmpiaEUxcnhyRXVVbG9KZHMwZVBQUWhXaTk3WUhadzdYREtjL0NxZW9LClgzWE83WlUwbEtjODI3SkFzWVI0bzRZVm1KZkl5RU1RMCtoTGt3ODl1bEpMVHZ1T3ZEbnVEZk1DZ1lFQXl5QjUKU09veDNrUm9JZEdyd3g2NWtQa24yMUx3cW54L29sczZ1bjRpbHhlZ1FPdVFDU091ZHk4cE9FVGYyUUJWSExETgpuYzFjN0IycVEzOEErWmU4S2dQRTk3L2R3c3ZLb29VN3JXYTFEaG04SHRUR3N3a1R5Z2EwZURtUFA2b1BkVi9qCmtEZVRNOFdHUjhzeHpkbDFkZnV6YWF3SlpZdjlta2RyS0lOWlc0RUNnWUVBa28wbWEyUU9VM2ZtTmxSY3kwVFIKem9OMmxQNlhWZmdKWUErYmFuTEI2OXorOHJZSzhHTXVjbW9JM2NRQ3A2UmpGZFhieGxCS1FkbzdUbVRtbHFSMQpwNFg1RnJrVXJYSEpic1I2bXpnN2dtNVBWamZycHFtZlVMWDNPZ3RvVS8vbnN1eGJTTlEyd1ZHQjc5RHc2RHNYCkVrM0xZUUEwMmt3MDRSbWx6MGh1cjhrQ2dZRUFvS0NvYUdtU1Q5TEdpZC9WTlBJcUNpT05TaG4zYU1vVTRGM0cKUGsyYXF1S3Eva3VKVmtEYUtUT3BJKzhMR1AzelVFSGNCMnFyamFnVHlWWTRmaWRvUzgwNVNEVjRkeDlTdVZ3awppZ1lMTFFCYXpBSzBza1YrV2FjZHRXakhCN0JDa3kzbHRWak5WZ1pnSG92bmNZSUNLZStGdkEyb1RKMzhTTEVyCll4a2pZNEVDZ1lCK2k0Vk93VlZIbWtXbUt6ZklCU1YvYmZRLzVIWWo4M040K3E4dXNTZ0JGMS85SjBJMmdkbjcKcjVxbitLUGtyd21pUEFmS2VwNzd3TzgzVzdGU0pTelpwaTEvN0ZMaTN6OWFRM1NzcGRpVy9Dd3hpOW9WV1pIZwpodnRRZFVUTnBpNlI3UWZONDA3UTRzaGxZMjZIRGVzV2VYQW5PbGltYnBiSUxEV3pxUGdiWmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIlJFTEVBU0UtTkFNRS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QFJFTEVBU0UtTkFNRS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vY29yZS5oYXJib3IuZG9tYWluL3NlcnZpY2UvdG9rZW4iLAogICAgICAic2VydmljZSI6ICJoYXJib3Itbm90YXJ5IiwKICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgInJvb3RjZXJ0YnVuZGxlIjogIi9yb290LmNydCIKICAgIH0KICB9Cn0=
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAUkVMRUFTRS1OQU1FLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "N3pkakcxd0p4THh5d2ZIMw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: https://core.harbor.domain/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT: ""
  TLS_KEY: ""
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
    EnableXSRF = true
    XSRFKey = 6SVNyout5sWVpTYLiryMVJ8NkhQlhWQKs7K8xXfN
    XSRFExpire = 3600
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://harbor-core"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://harbor-clair:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-portal"
  REGISTRYCTL_URL: "http://harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://harbor-clair:6061"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/nginx/configmap-https.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-nginx
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;

    events {
      worker_connections 1024;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path /tmp/client_body_temp;
      proxy_temp_path /tmp/proxy_temp;
      fastcgi_temp_path /tmp/fastcgi_temp;
      uwsgi_temp_path /tmp/uwsgi_temp;
      scgi_temp_path /tmp/scgi_temp;
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-core;
      }

      upstream portal {
        server harbor-portal;
      }
      upstream notary-server {
        server harbor-notary-server:4443;
      }
      
      log_format timed_combined 'remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      server {
        listen 4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.1 tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;
      
        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      }

      server {
        listen 8443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
      
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        # Add extra headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_cookie_path / "/; HttpOnly; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_cookie_path / "/; Secure";
          
          proxy_buffering off;
          proxy_request_buffering off;
        }
        
        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }
      
      location /service/notifications {
          return 404;
        }
      }
        server {
          listen 8080;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      } 
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-redis:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://core.harbor.domain/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
          ignoredmediatypes:
            - application/vnd.docker.image.rootfs.diff.tar.gzip
            - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
            - application/vnd.oci.image.layer.v1.tar
            - application/vnd.oci.image.layer.v1.tar+gzip
            - application/vnd.oci.image.layer.v1.tar+zstd
            - application/vnd.oci.image.layer.nondistributable.v1.tar
            - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
            - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
            - application/octet-stream
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-clair"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
    - name: notary
      port: 4443
      targetPort: 4443
  selector:
    app: "harbor"
    component: nginx
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: c790a26de7373b90d0b731af784c8d40440f766f497f84d49e1b2e1e17d5fde8
        checksum/secret: eedbdc2cec3014448f8a4a11a2e66285ed85bf31db6653175f19c39376e852af
        checksum/secret-core: 71e30a6fb11ddd137e7e94ad62c4497e24331d364fd44361cc99ccdd59b57bb2
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v0.9.0-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-chartmuseum"
        - secretRef:
            name: "harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: ec13977f3d8ba8afd6f205d8b996378d43e4f9cef8ff01823c3ba862cbab9ef4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.1.1-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: e30e6b82ee956d5751b4c35ea901f5ed9b46f001346c61299f0050d2b8595087
        checksum/secret: 0aa58e44a9e5fe7f4debd2a1ec663a45ae6359ee1b4772991cd6d7ed81a03ef5
        checksum/secret-jobservice: 53998ebebc9e704af000d6cfe1559055edd528d2c08df0a515ebe8b0c03a7b1e
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: harbor-nginx
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: c38b4cb4e408a754c9c9b533f2decc68bf6b0cab176a3b3559612d64383a1e62
        checksum/secret: bd0d1a7e1995926ff17852f44525ae3449f42669dece574f4d64e5530ec3e3e4
        checksum/secret-core: 8183dcfe5e0d27bb6313ea3031d3e277a24f8c8da92aa7db012eb92eb2ad9eb5
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: secret
          - name: CORE_URL
            value: "http://harbor-core"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
          - name: HTTP_PROXY
            value: ""
          - name: HTTPS_PROXY
            value: ""
          - name: NO_PROXY
            value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-nginx
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: nginx
      annotations:
        checksum/configmap: 19d9d432fc1f04148ceb40cfe91f0fbc7d5ec4db2b4c45b1f3e7bfa8bdbb6ab7
        checksum/secret: fdf50d3569638521f9a70ebfc7afbc7ed63e8db940d6a1e5c3fd5849ac58d1d1
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: nginx
        image: "goharbor/nginx-photon:v1.10.0"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        - containerPort: 8443
        - containerPort: 4443
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certificate
          mountPath: /etc/nginx/cert
      volumes:
      - name: config
        configMap:
          name: harbor-nginx
      - name: certificate
        secret:
          secretName: harbor-nginx
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: fda2e5552bdf3a51be2980fe5ec4222e27730c033e7641a913c73c2aeaab9738
        checksum/secret-core: 142ad9975a3fae2dc01f690690613bc0eb0b089bf19ae077412006c43cb30dbb
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v0.6.1-v1.10.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: harbor-core
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: fc388ccb5d85edb2c7c080ba999f40f343dc20da7e58e14cab37c05690b27dd0
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v0.6.1-v1.10.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 48ddcb2d5663de6cf1833d3fb690f1ed59088378b6abbefc9e09ad4ede660c0a
        checksum/secret: 1d04d363da6c07f14ed25350cd196ecd97dab530730a639b445d20529aec044d
        checksum/secret-jobservice: 128a9f5180458112e56a8c571d657d4a8a2887d7840f5e7181ac741bbace02dc
        checksum/secret-core: a5e2202e72529e1f4e499f592b0e5660e9d10a07b3860e05fd377065b96c4707
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-jobservice
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-core
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 90e0d57ebc6da6126ee1a270482b27747d8dede1c6ae5c371fafa2157b82cb87
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v1.10.0
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "rook"
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:v1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "rook"
      resources:
        requests:
          storage: "1Gi"
