---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "registry-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-harbor-clair
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEByZWdpc3RyeS1oYXJib3ItZGF0YWJhc2U6NTQzMi9wb3N0Z3Jlcz9zc2xtb2RlPWRpc2FibGUiCiAgICAgICMgTnVtYmVyIG9mIGVsZW1lbnRzIGtlcHQgaW4gdGhlIGNhY2hlCiAgICAgICMgVmFsdWVzIHVubGlrZWx5IHRvIGNoYW5nZSAoZS5nLiBuYW1lc3BhY2VzKSBhcmUgY2FjaGVkIGluIG9yZGVyIHRvIHNhdmUgcHJldmVudCBuZWVkbGVzcyByb3VuZHRyaXBzIHRvIHRoZSBkYXRhYmFzZS4KICAgICAgY2FjaGVzaXplOiAxNjM4NAogIGFwaToKICAgICMgQVBJIHNlcnZlciBwb3J0CiAgICBwb3J0OiA2MDYwCiAgICBoZWFsdGhwb3J0OiA2MDYxCiAgICAjIERlYWRsaW5lIGJlZm9yZSBhbiBBUEkgcmVxdWVzdCB3aWxsIHJlc3BvbmQgd2l0aCBhIDUwMwogICAgdGltZW91dDogMzAwcwogIHVwZGF0ZXI6CiAgICBpbnRlcnZhbDogMTJoCg==
  redis: cmVkaXM6Ly9yZWdpc3RyeS1oYXJib3ItcmVkaXM6NjM3OS80
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEByZWdpc3RyeS1oYXJib3ItZGF0YWJhc2U6NTQzMi9wb3N0Z3Jlcz9zc2xtb2RlPWRpc2FibGU=
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-harbor-core
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "d3RsYUk4VzFEc3ptcXV5ZQ=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "YWRtaW4="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "registry-harbor-database"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "registry-harbor-ingress"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhhZ0F3SUJBZ0lQT0NrSkFaTEpOcmZaQkdZZ1VHRkdNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1CUXgKRWpBUUJnTlZCQU1UQ1doaGNtSnZjaTFqWVRBZUZ3MHlNREF6TURZeU16RTRNVFJhRncweU1UQXpNRFl5TXpFNApNVFJhTUIweEd6QVpCZ05WQkFNVEVtTnZjbVV1YUdGeVltOXlMbVJ2YldGcGJqQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOclVzWVh5ZHFiNEVUcGR6aEVKcnlZS1NTbzB6YXEySWFCQWdaajAKcFJDZy9SQmNBL2hrM2JsRkdwTnBqMkRhU0l0SjJhcWZjRjFLTGlwNHRaMHRidG1BdmFIYlJ5Tko5alNlQUt3eApjUWNqeXhMYTNpVXpsS3Q0cE4xTFM2bzJpdmRCVGIzY1FxaHhPbjVXblBhTU5Ma0VWdGpwaUlPM3hxZTlOZXhaCkMzeCsrRnZFQmhMQUE0Ymx5b0RXZUhhOWVncUxGcjhKdU1iZzZoS3ZoMFJvL3lZaUg1VWoyODdQZy9YVU5MOFoKV0tiM0RHUVVKTUNZOEdtemhLMVQ3WXhreEVNL3VWK2tIckRVbUR4anB6eG4xdVY1emk0WFF5RlExNVEvcUd4YQpUVFFwM1hUZmZqd1BqcUZUUVdoaHF4UnFGSXFqN0F2aXBTZGdJRURkdVF3WTh3a0NBd0VBQWFOME1ISXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlYKSFJNQkFmOEVBakFBTURNR0ExVWRFUVFzTUNxQ0VtTnZjbVV1YUdGeVltOXlMbVJ2YldGcGJvSVVibTkwWVhKNQpMbWhoY21KdmNpNWtiMjFoYVc0d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHUW52WnIySzZEUk9tMTNKemVvCjhHZHQ4by9XNy9yVU5SdDk5UjBNTTZWeTFQVlZCaUpSa3o0TFJiME90STdKZWgyTTJFVEVIZDBhYU9TLzRlYW0Ka3Vuak43ekVmcTZiOWhqS0dTT1c1UW44ZkhmWGppN0FaUHlKR2hXbm5IdXRLY2kzdGN2eVFnNG9OSlVWd1YxMwpWQmNoQlV2RmdTcytXODRXdkg4cVJZbUE1Y3JJVnI3Yi94cWFPNTFvSHBhZ3AreHJGY08yY1QrdzZwSTJKTUlECnNCeDlpd2prRjBObUE4MkxDYnpmeE1WaU4vcVZ3ai9HYW9BdEpSVUZhMWZHMElZbXMvWTdUZnFEcE9xenMrUlEKV1pRWmF6ZGVTQU42blpyd3VrRVFEWEhnWWtVc2Fpa2J6TGJOOEdGcFdnV2VRdURvRHh0d1RIYTFzZWNQVlM3Ywp2UTA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMnRTeGhmSjJwdmdST2wzT0VRbXZKZ3BKS2pUTnFyWWhvRUNCbVBTbEVLRDlFRndECitHVGR1VVVhazJtUFlOcElpMG5acXA5d1hVb3VLbmkxblMxdTJZQzlvZHRISTBuMk5KNEFyREZ4QnlQTEV0cmUKSlRPVXEzaWszVXRMcWphSzkwRk52ZHhDcUhFNmZsYWM5b3cwdVFSVzJPbUlnN2ZHcDcwMTdGa0xmSDc0VzhRRwpFc0FEaHVYS2dOWjRkcjE2Q29zV3Z3bTR4dURxRXErSFJHai9KaUlmbFNQYnpzK0Q5ZFEwdnhsWXB2Y01aQlFrCndKandhYk9FclZQdGpHVEVReis1WDZRZXNOU1lQR09uUEdmVzVYbk9MaGRESVZEWGxEK29iRnBOTkNuZGROOSsKUEErT29WTkJhR0dyRkdvVWlxUHNDK0tsSjJBZ1FOMjVEQmp6Q1FJREFRQUJBb0lCQVFDK3U1Z25xZGZsWEY2WAp3dDh6Vm4rRTVuNHkvV2N0bmlYYzZaeUwxdUJ3aUFGSzJ3alMzZ2VyemlHRnp3SWJadWJJRVF4WmZUS1EvWEVUCnI3YU1VdWRGU01NQWFvR3NybkNjR0FONkVuWHp4U3poT0VkYm9ZTzVtU1FKaGZGallMcnJHODVJNTh4cHlKYzEKT3dVQWw5LzBTMlh2RmszWWtMdmp4RFZWMVo3L1dJYzROZVg2VmRWbEMxQTlsRTlRblo2bktaaFRSU0krQzAzMApmYlY2NnhuVzRzckxVV0x0V0cydFpFZDlwQlN0OWV6cC9nbmlqbU85M0Y5VURtL3ZMZ1VkL3p6c1E5NlhDd3FzCnpuSnIvbVh1Znlxd1h0ZzB1aEVSYmhBWUJUOElSUW95UXBRRW4wZGd6THJ1V1lHbUFtNng4aE5mU0pyM2JjSWYKM2Y4YVZjZWhBb0dCQU9sTm1DbEErVmlsbTFkQ1dxR2ZxRVUzR3FiUzJWRFdXT09CRGZzV0tHRVlubFhGU2taOQpkS1d1NFE3QWNjWFJIcWNKcVIzbWo3YmtaWFJvL1lrbFJ6a2xQZmVXK1pwdHBsd0tCVlRSb3NNODBsMU5tbHF4Ck1ZYnlheFkzMnpyaUphVVRxZ3packNOWkx1OUpPbkJ6elFkT0lCN21NcElnTDFnVHRYVS9kTzVsQW9HQkFQQWUKcXU4Y3lCTnhEdnRvL0RCemFEV2pXYU1ONEIvSjl1UnlWVExVL0EzT2ttWmZkV3JveGo1aDFMSThCT0U2V1FZZQphZVhmaDM5NERvU0FMN0JYWXBQRVJpSTJoREhnZk5najgxSmxyTTM1YlJmN00xZ0R3NXpYRTNvOHBaNHRMVmQxClliRitSR3lRTGVCNHRsaDM0azdJZVE2MUcvU0VWMnBuZ2ZTNVVpWFZBb0dCQU40ZU5QOFowQXQ0NS9Oa3hoclkKZ1lFY1hIQjFqOWJwckFrMXBsVG1ISjJNcmJwbE1qajRXbVVmb1QvRk1zeXVNeXUvQTlibTJ1NjZkbWtsU0RVWgpXN3pwV3h6dERVamNtaVZJbVJqTzJkSmRocjYwRW4vRDhhNVVBR1pQMlpZdkZyNGFnYXpvVkgzMis3dHZrWWJjCmlWZ3FKbVNrcjRMMXgzMW9qanRKcGc4TkFvR0FCcU9TYmxJSlppQTJIZFZsUTZHdE8rNXNTQW5XTElyVS9MUDgKanc4OGVOVkJUdnRNcjh3SHp5bTlTOEJGRWtVZXVRQ1dSUGpOTWtVTGdiWlptektQVXk2V0VkUVlDNWo5V3F5RAp5Yjl0NjdQOXhDLzUxM0VqTTI3dTV1NU9WZlZCejYwN0trRW5leWp4VzhkNm95K05Ya2hFc0pkcFVuVm1SVmJmClRQaml3SkVDZ1lFQTBuZENJZzhubEFxY0ZSdEJRd0N3QlhCalh0TE5lK2s0ZTRUODA5KzJSRG5jbHB3TXRGRFAKZkgrTjM1S1lSUHNmc2d3dm9jVEp5RTJ2V0JPeDFpOWs3QXpiaWNLMXQ2Z2tKOEhhc0x6SEc0TWlhQlV6UStvNwpUclFpRjZHZjh0RTVuOGNZcGNGbGxSNk5RMTlIV2N2TmdXNmEwcjdFQjFzUXI5T0FsVjVXMjBBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5VENDQWQyZ0F3SUJBZ0lSQUxhaGVSL3ZMaStBQWJwcnZvMWxTTG93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURNd05qSXpNVGd4TkZvWERUSXhNRE13TmpJegpNVGd4TkZvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUnFzUVJ5emNEelNKeUt3SzBVTk1Qd1hpNTA3QVV6YlJ0REtGM2x0UDdxZk9aVHQKNzh2YlZvTzloNGpybWh1UUJ3S0JuWVJQYlIrcThrT29nQ3A2YmVmVmlTVDA0ZDVPbzlIV3VXNzJSWmxGMTBpegpWOEVoRXdYZ1hPYlhENnhYaDJYRFhoVnZEOFMzU0FLZyt4ZHl1aHlMcjFwUFU2eXBxUEZqL1ArdjQ4clJmdXk5CnhkM2V6aGFzdmhrYW93RkNrVnh0ODdrNGpvRnM3T210MUx0bGtNYkNFTHdPL0FLRWg4L0FOeGdCUGRpbmxHcTMKQ1BDYTVMd0pSV1I1cUtrRUR1dVZMNGlvQ1dLbGM5K3lkNmd1aC91alUrZmdwdGdpUkJqM1NTVnZwMTMyUVJlcwpEVTFFaWI0cTgzSW50Q21pdzRRUWtEaDh0ckNGMCs1Nk4yN2cyd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR2lJWU81aXBzanpURk1kcWZvaTVqMWh1cjcrSEFBdwoyWGk1cXpvbGtrWCtpOGRGVXkxV2tkS0Q5ZEs0WnNnZE1POEszd0hmUWt0UGx5S1V2VHlJOHUxUk94eHQvZnNICjZNdlBrRXhDLzJDU0pNamt2b0hWdnN6MmtPdjVESE5FdnA4cVluY25tbGJVczltOVUrTytGMEhqVUFTK0JTOWsKeVA3L0w5TzY1L2F1aDhmaUpsWTF1a003MUQxWXBzWWs5dDREbitBdHA0S2xlcWpNZnZLN1VLUzRqdTllZ2xkUQpnQytReGdZN012ems2TktUd1g2M2dHSFA2bEZjRnk4S1JyM2pvMXZnQjlqS2xQVjgzV1d6OHJMWnphUkZVVWZXCmZVUTh5UkxFY0d5VjdCamEvVHVzaDFjQ0YxWm1jVDd0UVFXU1kxcXZtcUlwcm85azZEdURwc1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "registry-harbor-jobservice"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "OEswdTBzQjRyNDFuNnlBTQ=="
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-harbor-notary-server
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lSQVBudGNvUTNKRGhPaGhKR3JTWE5zcFl3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREF6TURZeU16RTRNVFJhRncweQpNVEF6TURZeU16RTRNVFJhTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZGd2dGR2L1gwNk1vUGsrTHZxWVdIelVJZUl1dzAKR3ltdHZaQ3hHdTg0NkxHTE9kNlBxVXBVcFlvRWJNR1k0NGJRalI4aHFKSzVLUlo1aFZWV2RRcUZrdmlBQ0szKworS1U4RFBWWXJsallkZkhlN3JVWWd2TldqVzNKSGhPWlYyU2x1YzJmNTAyaHdRUFFWbUtkQmZMZFNJYjlaTy9WCllqUXJpdFpDRm9GUXhySm1LZThHazgyWFlWTzlNK3RnS090VEl6RElLVkhGSTk0Yng1RGtIWFQ2Ymd6ZmZRYnIKZ3lMQmlSWkEwYzBxaGNwU3dnR3N4bnBmT1RCU3hsRUJtMDJaVnFJdGFTN2t2K2VQOU1lOWRoOHU0VkI4TElnNApwTERJU1FKVklFemwydWdJZmZDLzhiZXcxcWJHZFJSUURrWHBkeEFKWDd5RzdNWi9pTjVzb1BJWEFnTUJBQUdqClFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUpYcVF5RTB4Vkx0cgp0WDNYeVM4MjRwbE1WVlpyRjh4SXhLOWw1UTdWRStDOEVweld6WmpUL2U0SDdSbWh4R3g2ZndMb0RxOGRJSDlDCnFpb3BnVVhDbXdhelEvMGJHWFdaSDBQdVBqSHkvYzdMdTcvSkYzUlovSGRTcTlmNkloVFdsTjR1TndUWFo4blgKMkpyMjFHS2twVEJpYXFIRnM0NFpyVjB5aTBYQUIwNzduNkFYbjR6QkxWUzkwVDR5NnhPVWVuaUJ6K1laektuNgpTaDF3K3U5VXZjK3p3N2RjeEhMaGdhekFBSDhHZ3BzZ3FUU1gvbGtkais5MVZyaWQwU2N6SXEzZEcxNlZFcnloClBMN2RMNkRNQ0pIWFBsL3RiYzVwNHRqRmdMK0huK3ZnamZOOHJLL0dzb2VmN0RvbCsxQm4xVk41QzhPc3FsU2MKT1NlR3V6NkhIUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURERENDQWZTZ0F3SUJBZ0lRTnMwR1pmRURlREtuN3Y3ZFRuQkJOakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRE13TmpJek1UZ3hORm9YRFRJeApNRE13TmpJek1UZ3hORm93S0RFbU1DUUdBMVVFQXhNZGNtVm5hWE4wY25rdGFHRnlZbTl5TFc1dmRHRnllUzF6CmFXZHVaWEl3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFgveUErZEdLR2sraVoKYjluVjcrdVhmbFpheFlwc0FsOGN4T1krZ1p3VGhVY1NyWnRuc2VTaHJzV0tzTmlRUm0va3FnZGVFQys1WDl4TgphekRodmNHTmFoYzJZM1dQVUFIRzFsOXBCSjJmdk9rc1pDNnZicEpkajlxOVMxRmp4Sm8yV1FaZGplZWhvSndrCm5FTWcrREw2d0ZrZ0I4VitJU2VheTdHSTdLZDFhZmpjYjRjSjhyYXBPZ3IyZ3hDSU84RVkwRUIrZEMzcWRDODkKb0plTzA2MzRtUmNWM0tYMlpCdTRwaVRGNk5Ia3d3YTZsN05mNjU4UWJHUzIxdkJ2cERNN1kyZWVXZ1F3azFrbAovZEp4YU1UVEEzYUFmeDFUSkFTbnZtVTZZb2loQnhoeFo3TTB4eFpQM0krR0tRQ2dKUDIxZHZ0MDlLb0xGeTRaCnpuWitUamVmQWdNQkFBR2pQekE5TUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUYKQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpqaVJDNS9ZOUxya2pKSzZSek42SXZEcmNXTzVvWXZoNG9ibk1TT1V6MS84emNvV3g3ancrUEJoQmtYdWZFVDhXCmZNR1dHVklnTWNKZTFqNmpEMGZROE9PLzk0SEQ1UXViZlQwNWllSnUvbVU0bjdLSHUrOFI4UGdhVmNUUzlTRVIKdGxoM0J3Y0drUStBY0NUdFBvREthRWlZVW56YVM1bjZsU055b3JBU253ek1BRFZvNU9jbk5KZ0d4blVNR3hCTwp6U2ZYeEVEL0Y0cFBvNmhiaVhPMTZtYXZFalRJWTdQL2FzdHIzdFdrSmtLN3FhQ1F0SzNrSlVjUVdYN2Q3TzlsCldyWUNQelJ2a2JuN2tjZUkrM0VpUnFmU0c3Si9DSXkvTkdocWlMMTBQZVpkM3Rtd1MrMmZyMEcvcFNaUHRORmgKVkl1RUNIcmpTSis4UEtrRWtxcm5FZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMS84Z1BuUmlocFBvbVcvWjFlL3JsMzVXV3NXS2JBSmZITVRtUG9HY0U0VkhFcTJiClo3SGtvYTdGaXJEWWtFWnY1S29IWGhBdnVWL2NUV3N3NGIzQmpXb1hObU4xajFBQnh0WmZhUVNkbjd6cExHUXUKcjI2U1hZL2F2VXRSWThTYU5sa0dYWTNub2FDY0pKeERJUGd5K3NCWklBZkZmaUVubXN1eGlPeW5kV240M0crSApDZksycVRvSzlvTVFpRHZCR05CQWZuUXQ2blF2UGFDWGp0T3QrSmtYRmR5bDltUWJ1S1lreGVqUjVNTUd1cGV6ClgrdWZFR3hrdHRid2I2UXpPMk5ubmxvRU1KTlpKZjNTY1dqRTB3TjJnSDhkVXlRRXA3NWxPbUtJb1FjWWNXZXoKTk1jV1Q5eVBoaWtBb0NUOXRYYjdkUFNxQ3hjdUdjNTJmazQzbndJREFRQUJBb0lCQURoOGxQOGdTci90SUhBNApDeHppMEpiZXlGQ1d4cHQyaDA4cnd4Ym5xRnlHaDA3QUxoc1JMN3lFeTA1NDd6blQ0ZUZJQWdNOGNtNmxQaVRVCitvU2VybWFBTHkvZkZOaDAwUElpRC9PVDdIRGc0NDNqYVQ0aHlZOUVWcTBZYkdHT0FkSml0OEp4b1BqbzJzek0KUE5YN2NzR1cyZmdCY0VtSy9DT0VUNXFDWVV6WC9aRU5LK1JhZFlZMGtCWTJJbWhZM2I1ZW1ZeHBzM0V5WnZFLwptRUZGMHMzZUFON2xiVnhjaG81QkFGWXlMOFJtdHk4WnprZmJ6K3htWVI0cENkZHdRdjFIcU15VXE5L1FPTGFjCkxBYW1DQ2VhMzM1aTkwckVKVVBTSkVtR3BSMSs0YUFwT1ZMbFNBUEs0Y1Y3Q013eW9CeGpVMXdPdGI5TStiNXgKVDR2bEtoa0NnWUVBMmlFY2w3QjRrZ0tBSGp3RzZJL201NER0TnpRSFhNa1FtaVgwMmFNUzNyaEJqOURNcmlJbwp1Ri9wb01TZUNqa2lHWHhSc2drd0RDZ0hrRUp3TGkyL2I3VmpWVnp2V2pLVTM4OFBUcjdvN3ZXR1JCVVFoZGt3CnErb01TNGJSV1NtWGRySDYxclJZMTZZdDJlVU85eW0zMHF0N05wTVovZjlIdWdHOFR0NWNwTE1DZ1lFQS9YODQKL2FMWFJua1VGQWUveTVDQW5QWTArdSsxOXMxaktYNWx2YkxuSnFLM3hQbUp1bW1ad21SZzhlUXdCMldDTVhZOQp6SjRHTDVjdHRLMGc3Z1BKQ08wWlBRdXEydXJqZWJyK2pBVUo1ZkZIbmhnckFnbnJPSHB1QUp6ZFJ6NWd3TWtiClFVTkpKTE9sa3lLVGJGNnpYYkJxb2d0TmJ2L3N4Z2ZOMWFKYVQyVUNnWUFSbjZFK3hEeEpsN2dnT1R0WnFON0EKRDVPYTVUSS9GZU9vZ0s2U3N2RkFXMlM0cU9jUW5xUHBtWjQzcGdzYXlsanQ5RFJwalFKN3lQUXJmS0t4cUhLUwpKUGFjbkFDZXFmMkxRNkI1L1VTMm9kR3lTSDFvUXc4Q3BNdFBndG9CT1RJS25nQ2xQamI3WFdyUTh3Zk5nbXBlCnRBb2xjNmNpOVhBbklDTEZ3SU45cndLQmdRRGhWWVhEY0UwTVIvU2hHWUpUNFU5eU55bEJKblFKdnVpMnFiU20KdTdEZGx5Ymo0UzJjbHVJbStqTnkwZlFmbnd2c0M3OURjL1RydU9iWUJFMlJSYXdlVXlSc0wwTGc5b3JlV21xSwo3Syt2eHBweTNlamRGeFFRVUVRWUoxaExUQmVWUnk4REJGeXdVMENMV2VEU0pCd3MyL1R0dGo1T3ZSQXJ1Q1F3CkV2RlVRUUtCZ1FERHZtUEkrbFU3R2NlUkZZNmlibi9qYW5sMlBzR3lKZkdTNDJ3a1VnMFRtSXF2NXpXNzNLaFgKQUVDSHBuZU9IcmNTdXdReTUwbldZVlo4TitsY3lkVDJuOTRCUFZBSHcwRkZXYnBnZmdXWXR6YVcrY0xyUnc2YgpYak1yVUxyL0p5amtKdWV6TnFIcWZlYy90UjI2S09USUQyM3U0U3NjQW5VNElzd3BjZzc3cXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogInJlZ2lzdHJ5LWhhcmJvci1ub3Rhcnktc2lnbmVyIiwKICAgICJwb3J0IjogIjc4OTkiLAogICAgInRsc19jYV9maWxlIjogIi9ldGMvc3NsL25vdGFyeS9jYS5jcnQiLAogICAgImtleV9hbGdvcml0aG0iOiAiZWNkc2EiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAcmVnaXN0cnktaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2VydmVyP3NzbG1vZGU9ZGlzYWJsZSIKICB9LAogICJhdXRoIjogewogICAgInR5cGUiOiAidG9rZW4iLAogICAgIm9wdGlvbnMiOiB7CiAgICAgICJyZWFsbSI6ICJodHRwczovL2hhcmJvci4zNC44NC4xMDUuMTg0LnhpcC5pby9zZXJ2aWNlL3Rva2VuIiwKICAgICAgInNlcnZpY2UiOiAiaGFyYm9yLW5vdGFyeSIsCiAgICAgICJpc3N1ZXIiOiAiaGFyYm9yLXRva2VuLWlzc3VlciIsCiAgICAgICJyb290Y2VydGJ1bmRsZSI6ICIvcm9vdC5jcnQiCiAgICB9CiAgfQp9
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAcmVnaXN0cnktaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2lnbmVyP3NzbG1vZGU9ZGlzYWJsZSIsCiAgICAiZGVmYXVsdF9hbGlhcyI6ICJkZWZhdWx0YWxpYXMiCiAgfQp9
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "registry-harbor-registry"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "c1JGdXZGQ1NHeHFIV3I5aw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "registry-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "registry-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: https://harbor.34.84.105.184.xip.io/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT: ""
  TLS_KEY: ""
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-harbor-core
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
    EnableXSRF = true
    XSRFKey = eaWtiWF96NXD27dLZGgzWSBHnb1O6ZKPzllJm39W
    XSRFExpire = 3600
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "registry-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://harbor.34.84.105.184.xip.io"
  CORE_URL: "http://registry-harbor-core"
  JOBSERVICE_URL: "http://registry-harbor-jobservice"
  REGISTRY_URL: "http://registry-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://registry-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://registry-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "registry-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://registry-harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://registry-harbor-clair:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://registry-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "registry-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://registry-harbor-redis:6379/2"
  PORTAL_URL: "http://registry-harbor-portal"
  REGISTRYCTL_URL: "http://registry-harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://registry-harbor-clair:6061"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "registry-harbor-core,registry-harbor-jobservice,registry-harbor-database,registry-harbor-chartmuseum,registry-harbor-clair,registry-harbor-notary-server,registry-harbor-notary-signer,registry-harbor-registry,registry-harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "registry-harbor-jobservice"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "registry-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "registry-harbor-registry"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "registry-harbor-redis:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://harbor.34.84.105.184.xip.io/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://registry-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
          ignoredmediatypes:
            - application/vnd.docker.image.rootfs.diff.tar.gzip
            - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
            - application/vnd.oci.image.layer.v1.tar
            - application/vnd.oci.image.layer.v1.tar+gzip
            - application/vnd.oci.image.layer.v1.tar+zstd
            - application/vnd.oci.image.layer.nondistributable.v1.tar
            - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
            - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
            - application/octet-stream
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: registry-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-ceph-block
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: registry-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-ceph-block
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: registry-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-ceph-block
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "registry-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: registry
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "registry-harbor-clair"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: registry
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry-harbor-core
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: registry
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "registry-harbor-database"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: registry
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "registry-harbor-jobservice"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: registry
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry-harbor-notary-signer
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: registry
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry-harbor-notary-server
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: registry
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "registry-harbor-portal"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: registry
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry-harbor-redis
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: registry
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "registry-harbor-registry"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: registry
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "registry-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: de088fedf0ff4078f70660fe9cdbddb1aabca0d6ce736e0e56ddf7040b8a8f72
        checksum/secret: 1f31738d069828d7a38d3fc5377467e919ae6cedabd9fbfd7ea223e576ec2273
        checksum/secret-core: 3b6392214c6f121bc403770da43b1d666994235e4516871b78df5d0dc622a689
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "registry-harbor-chartmuseum"
        - secretRef:
            name: "registry-harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: registry-harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath: 
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: registry-harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-harbor-clair
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: b02dee9c5c7c71c8b1fa32b82e00a90bb87c4e1853c7d4901291451844e1ef2d
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "registry-harbor-core,registry-harbor-jobservice,registry-harbor-database,registry-harbor-chartmuseum,registry-harbor-clair,registry-harbor-notary-server,registry-harbor-notary-signer,registry-harbor-registry,registry-harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: registry-harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: registry-harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "registry-harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-harbor-core
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: registry
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 50064033bc7da192e02a596e83f8d7acf3359888368b232061e98c230c827306
        checksum/secret: 63bb21059c8ec2755a29c311116c238d3239579a68bb213420b98187afbaec9f
        checksum/secret-jobservice: 94fe95ac4674d586dff71976b4b5d7f24c3292fe3b1bb80173f9b4fd2beab757
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "registry-harbor-core"
        - secretRef:
            name: "registry-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: registry-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "registry-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: registry-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: registry-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: registry-harbor-core
      - name: ca-download
        secret:
          secretName: "registry-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "registry-harbor-jobservice"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 670293e0fa09c77e09f44a06be795ffaed85017fbbb58acba04a115cbfb2d1f0
        checksum/secret: 99313acb804e95ea45540a6063c92bde4170fba297e27f847a8cd4330b52f6b2
        checksum/secret-core: 92ead104937c454e4e8418ea0e39c4926aa9f6c87e59e1b20e5ae77fbcc6f753
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: registry-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "registry-harbor-jobservice"
                key: secret
          - name: CORE_URL
            value: "http://registry-harbor-core"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://registry-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
          - name: HTTP_PROXY
            value: ""
          - name: HTTPS_PROXY
            value: ""
          - name: NO_PROXY
            value: "registry-harbor-core,registry-harbor-jobservice,registry-harbor-database,registry-harbor-chartmuseum,registry-harbor-clair,registry-harbor-notary-server,registry-harbor-notary-signer,registry-harbor-registry,registry-harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "registry-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: registry-harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-harbor-notary-server
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: fd271afa34b85fc1f19e15b186b4325e642f5e17c338bbdd12acfdabc17272d6
        checksum/secret-core: 68a9b2a21ab05bf381e9a319374c27be12d1269ae1aef743fa0613fb05f6869a
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:dev
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@registry-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "registry-harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: registry-harbor-core
      - name: signer-certificate
        secret:
          secretName: registry-harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-harbor-notary-signer
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 42de80651dd5dcd0a9e6eb0beb1861eac53b958d2d90e576924c2f5fddd2ebda
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:dev
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@registry-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "registry-harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: registry-harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "registry-harbor-portal"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: registry
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "registry-harbor-registry"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: a76e017b90a341cf2ef8a77f49dab61f6610e92fa535d5deda56ab32f8f89a5e
        checksum/secret: b6e07393ad34b11b77732fb1be57abfb733b36ff9c4ee827e493f31614b96c3c
        checksum/secret-jobservice: 4f4c8ceb15a50cbb8fdf055c65e2cce2f281775d9099f522c0b5e0d8787b4895
        checksum/secret-core: c410e0fce202f788cd2b471d465443bd0c3cb03c49d7f187f31f50f3a0245f81
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "registry-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "registry-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: registry-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: registry-harbor-jobservice
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: registry-harbor-core
      - name: registry-config
        configMap:
          name: "registry-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: registry-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "registry-harbor-database"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "registry-harbor-database"
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 7582282f6bf2963d4fa50fee1495adbcf39e5f9504ede9c914dc6249b2159e1f
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      - name: "remove-lost-found"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "registry-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "rook-ceph-block"
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: registry-harbor-redis
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: registry-harbor-redis
  selector:
    matchLabels:
      release: registry
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: registry
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "rook-ceph-block"
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "registry-harbor-ingress"
  labels:
    heritage: Helm
    release: registry
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: "registry-harbor-ingress"
    hosts:
    - core.harbor.domain
  - secretName: "registry-harbor-ingress"
    hosts:
    - notary.harbor.domain
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: registry-harbor-portal
          servicePort: 80
      - path: /api/
        backend:
          serviceName: registry-harbor-core
          servicePort: 80
      - path: /service/
        backend:
          serviceName: registry-harbor-core
          servicePort: 80
      - path: /v2/
        backend:
          serviceName: registry-harbor-core
          servicePort: 80
      - path: /chartrepo/
        backend:
          serviceName: registry-harbor-core
          servicePort: 80
      - path: /c/
        backend:
          serviceName: registry-harbor-core
          servicePort: 80
    host: core.harbor.domain
  - http:
      paths:
      - path: /
        backend:
          serviceName: registry-harbor-notary-server
          servicePort: 4443
    host: notary.harbor.domain
